BINDIR=../bin
LOCALINC=-I/usr/local/include
INC=-I. -I.. -I../include $(LOCALINC)
LIBFLAGS=-L/usr/local/lib
MAKE=make
CC=gcc
CXX=g++
DEBUGOPT=-Wall -g -pg 
DLMALLOC=0
MATBUILD_TPIE=0
TPIE_DIR=f:/tmp/nfs/tpie

#Hope, we're running Mingw32 ;)
ifeq ($(OSTYPE),msys)
DLMALLOC=1
endif

LANCZOS=blanczos64
ALLOPT=-march=$(ARCH) -mtune=$(ARCH) -DMALLOC_REPORTING -ftracer -pipe

# -DL2_CACHE_SIZE=512 works well on some Pentium 4 processors.
# It brings the opposite effect on AMD chips and some Pentium 4 processors.
ifeq ($(ARCH),pentium4)
    ALLOPT+=-DL2_CACHE_SIZE=512
endif

OPT2=-O2 -funroll-loops -fomit-frame-pointer -Wall $(ALLOPT)
OPT3=-O3 -ffast-math -funroll-loops -finline-functions -ftracer -finline-limit=1000 -fomit-frame-pointer -Wall $(ALLOPT)
OPT=-Wall -O $(ALLOPT)

#OPT=$(DEBUGOPT) $(ALLOPT) 
#OPT2=$(DEBUGOPT) $(ALLOPT)
#OPT3=$(DEBUGOPT) $(ALLOPT) 

OBJS=getprimes.o \
     fbmisc.o mulmod32.s squfof.o rels.o \
     $(LANCZOS).o poly.o mpz_poly.o \
     mpz_mat.o smintfact.o misc.o ecm4c.o nfmisc.o \
     montgomery_sqrt.o matstuff.o dickman.o makefb.o fbgen.o\
     modinv1002.S llist.o if.o

ifeq ($(DLMALLOC),1)
OBJS+= dlmalloc.o
endif

BINS=$(BINDIR)/sieve $(BINDIR)/procrels $(BINDIR)/sqrt $(BINDIR)/polyselect $(BINDIR)/makefb $(BINDIR)/matsolve $(BINDIR)/matbuild

ifeq ($(MATBUILD_TPIE),1)
BINS+= $(BINDIR)/matbuild-tpie
INC+= -I$(TPIE_DIR)/include
LIBFLAGS+= -L$(TPIE_DIR)/lib
endif

#LSBINS=lasieve4/gnfs-lasieve4I12e lasieve4/gnfs-lasieve4I13e \
#       lasieve4/gnfs-lasieve4I14e
LSBINS=latsiever polsel
TESTBIN=./tsrc
TESTCODE=./tsrc

all : $(OBJS) $(BINS) $(LSBINS) strip ;
# all : $(OBJS) $(BINS) $(LSBINS) ;
tests: $(TESTS) ;
bins: $(BINS) ;


.c.o : 
	$(CC) $(INC) $(OPT3) -c $*.c

smintfact.o : smintfact.c ;
	$(CC) $(INC) $(OPT3) -c smintfact.c

fbmisc.o : fbmisc.c ;
	$(CC) $(INC) $(OPT3) -c fbmisc.c

rels.o : rels.c ;
	$(CC) $(INC) $(OPT3) -c rels.c

latsieve.o : latsieve.c ;
	$(CC) $(INC) $(OPT3) -c latsieve.c 

$(BINDIR)/sieve : sieve.c clsieve.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o $@ sieve.c clsieve.c $(OBJS) -lgmp -lm 

ifeq ($(DLMALLOC),1)
$(BINDIR)/makefb : makefb.c $(OBJS) ;
	$(CC) $(INC) $(OPT2) $(LIBFLAGS) -D_MAKEFB_STANDALONE -o $@ makefb.c getprimes.o \
             fbmisc.o mulmod32.s poly.o mpz_poly.o smintfact.o if.o \
             misc.o nfmisc.o mpz_mat.o ecm4c.o modinv1002.S fbgen.o rels.o dlmalloc.o -lgmp -lm
else
$(BINDIR)/makefb : makefb.c $(OBJS) ;
	$(CC) $(INC) $(OPT2) $(LIBFLAGS) -D_MAKEFB_STANDALONE -o $@ makefb.c getprimes.o \
             fbmisc.o mulmod32.s poly.o mpz_poly.o smintfact.o if.o\
             misc.o nfmisc.o mpz_mat.o ecm4c.o modinv1002.S fbgen.o rels.o -lgmp -lm
endif

$(BINDIR)/procrels : procrels.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o $@ procrels.c $(OBJS) -lgmp -lm 
#	$(CC) $(INC) $(DEBUGOPT) $(LIBFLAGS) -o $@ procrels.c $(OBJS) -lgmp -lm 

$(BINDIR)/matbuild : matbuild.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o $@ matbuild.c combparts.c $(OBJS) -lgmp -lm 
#	$(CC) $(INC) $(DEBUGOPT) $(LIBFLAGS) -o $@ matbuild.c $(OBJS) -lgmp -lm 

$(BINDIR)/matbuild-tpie : matbuild-tpie.c $(OBJS)
	$(CXX) $(INC) $(OPT3) $(LIBFLAGS) -o $@ matbuild-tpie.c experimental/combparts_tpie.cpp experimental/llist_tpie.cpp $(OBJS) -lgmp -lm -ltpie

$(BINDIR)/matsolve : matsolve.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o $@ matsolve.c $(OBJS) -lgmp -lm 
#	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -g -o $@ matsolve.c $(OBJS) -lgmp -lm -lefence

$(BINDIR)/sqrt : sqrt.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o $@ sqrt.c $(OBJS) -lgmp -lm 

$(BINDIR)/polyselect : polyselect.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o $@ polyselect.c $(OBJS) -lgmp -lm 

latsiever : ;
	cd lasieve4; LIBFLAGS="$(LIBFLAGS)" CFLAGS="$(OPT3) $(LOCALINC)" $(MAKE) -f Makefile.x86

polsel : ;
	CFLAGS="$(OPT3) -I. $(LOCALINC)" LIBFLAGS="$(LIBFLAGS)" $(MAKE) -C pol5 intel

strip : ;
ifeq ($(OS),Windows_NT)
	strip $(BINDIR)/*.exe
else
	strip $(BINS) $(BINDIR)/gnfs-lasieve4I1?e $(BINDIR)/pol51m0* $(BINDIR)/pol51opt*
endif

clean : lasieve-clean polsel-clean ;
	rm -f *.o core $(BINS)
	rm -f gnfs-lasieve4I1?e
	rm -f *.exe

lasieve-clean: ;
	$(MAKE) -C lasieve4 -f Makefile.x86 clean

polsel-clean : ;
	$(MAKE) -C pol5 clean

squeaky : clean ;
	
