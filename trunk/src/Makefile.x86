ARCH=pentium3
LOCALINC=-I/usr/local/include
INC=-I../include $(LOCALINC)
LIBFLAGS=-L/usr/local/lib
MAKE=make
CC=gcc
CXX=g++
DEBUGOPT=-Wall -g -pg 
DLMALLOC=0
MATBUILD_TPIE=0
TPIE_DIR=f:/tmp/nfs/tpie

#Hope, we're running Mingw32 ;)
ifeq ($(OSTYPE),msys)
DLMALLOC=1
endif

LANCZOS=blanczos64
# Choose one of these for some more optimization for
# all but the lattice sieving code.
# -DL2_CACHE_SIZE=512 works well on some Pentium 4 processors.
# It brings the opposite effect on AMD chips and some Pentium 4 processors.
#ALLOPT=-march=athlon-xp
#ALLOPT=-DMALLOC_REPORTING
#ALLOPT=-march=pentium4 -DL2_CACHE_SIZE=512
#ALLOPT=-march=pentium3
ifeq ($(ARCH),pentium4)
    ALLOPT=-DMALLOC_REPORTING -march=$(ARCH) -DL2_CACHE_SIZE=512 -ftracer -pipe
else
    ALLOPT=-DMALLOC_REPORTING -march=$(ARCH) -ftracer -pipe
endif

OPT2=-O2 -funroll-loops -fomit-frame-pointer -Wall $(ALLOPT)
OPT3=-O3 -ffast-math -funroll-loops -finline-functions -ftracer -finline-limit=1000 -fomit-frame-pointer -Wall $(ALLOPT)
OPT=-Wall -O $(ALLOPT)

#OPT=$(DEBUGOPT) $(ALLOPT) 
#OPT2=$(DEBUGOPT) $(ALLOPT)
#OPT3=$(DEBUGOPT) $(ALLOPT) 

ifeq ($(DLMALLOC),1)
OBJS=getprimes.o \
     fbmisc.o mulmod32.s squfof.o rels.o \
     $(LANCZOS).o poly.o mpz_poly.o \
     mpz_mat.o smintfact.o misc.o ecm4c.o nfmisc.o \
     montgomery_sqrt.o matstuff.o dickman.o makefb.o fbgen.o\
     modinv1002.S llist.o dlmalloc.o
else
OBJS=getprimes.o \
     fbmisc.o mulmod32.s squfof.o rels.o \
     $(LANCZOS).o poly.o mpz_poly.o \
     mpz_mat.o smintfact.o misc.o ecm4c.o nfmisc.o \
     montgomery_sqrt.o matstuff.o dickman.o makefb.o fbgen.o\
     modinv1002.S llist.o
endif

BINS=sieve procrels sqrt polyselect makefb matsolve matbuild

ifeq ($(MATBUILD_TPIE),1)
BINS+= matbuild-tpie
INC+= -I$(TPIE_DIR)/include
LIBFLAGS+= -L$(TPIE_DIR)/lib
endif

#LSBINS=lasieve4/gnfs-lasieve4I12e lasieve4/gnfs-lasieve4I13e \
#       lasieve4/gnfs-lasieve4I14e
LSBINS=latsiever polsel
TESTBIN=./tsrc
TESTCODE=./tsrc

all : $(OBJS) $(BINS) $(LSBINS) strip ;
# all : $(OBJS) $(BINS) $(LSBINS) ;
tests: $(TESTS) ;
bins: $(BINS) ;


.c.o : 
	$(CC) $(INC) $(OPT3) -c $*.c

smintfact.o : smintfact.c ;
	$(CC) $(INC) $(OPT3) -c smintfact.c

fbmisc.o : fbmisc.c ;
	$(CC) $(INC) $(OPT3) -c fbmisc.c

rels.o : rels.c ;
	$(CC) $(INC) $(OPT3) -c rels.c

latsieve.o : latsieve.c ;
	$(CC) $(INC) $(OPT3) -c latsieve.c 

sieve : sieve.c clsieve.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o sieve sieve.c clsieve.c $(OBJS) -lgmp -lm 

ifeq ($(DLMALLOC),1)
makefb : makefb.c $(OBJS) ;
	$(CC) $(INC) $(OPT2) $(LIBFLAGS) -D_MAKEFB_STANDALONE -o makefb makefb.c getprimes.o \
             fbmisc.o mulmod32.s poly.o mpz_poly.o smintfact.o \
             misc.o nfmisc.o mpz_mat.o ecm4c.o modinv1002.S fbgen.o rels.o dlmalloc.o -lgmp -lm
else
makefb : makefb.c $(OBJS) ;
	$(CC) $(INC) $(OPT2) $(LIBFLAGS) -D_MAKEFB_STANDALONE -o makefb makefb.c getprimes.o \
             fbmisc.o mulmod32.s poly.o mpz_poly.o smintfact.o \
             misc.o nfmisc.o mpz_mat.o ecm4c.o modinv1002.S fbgen.o rels.o -lgmp -lm
endif

procrels : procrels.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o procrels procrels.c $(OBJS) -lgmp -lm 
#	$(CC) $(INC) $(DEBUGOPT) $(LIBFLAGS) -o procrels procrels.c $(OBJS) -lgmp -lm 

matbuild : matbuild.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o matbuild matbuild.c combparts.c $(OBJS) -lgmp -lm 
#	$(CC) $(INC) $(DEBUGOPT) $(LIBFLAGS) -o matbuild matbuild.c $(OBJS) -lgmp -lm 

matbuild-tpie : matbuild-tpie.c $(OBJS)
	$(CXX) $(INC) $(OPT3) $(LIBFLAGS) -o matbuild-tpie matbuild-tpie.c experimental/combparts_tpie.cpp experimental/llist_tpie.cpp $(OBJS) -lgmp -lm -ltpie

matsolve : matsolve.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o matsolve matsolve.c $(OBJS) -lgmp -lm 
#	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -g -o matsolve matsolve.c $(OBJS) -lgmp -lm -lefence

sqrt : sqrt.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o sqrt sqrt.c $(OBJS) -lgmp -lm 

polyselect : polyselect.c $(OBJS) ;
	$(CC) $(INC) $(OPT3) $(LIBFLAGS) -o polyselect polyselect.c $(OBJS) -lgmp -lm 

latsiever : ;
	cd lasieve4; LIBFLAGS="$(LIBFLAGS)" CFLAGS="$(OPT3) $(LOCALINC)" $(MAKE) -f Makefile.x86
ifeq ($(OS),Windows_NT)
	ln -fs lasieve4/gnfs-lasieve4I12e.exe gnfs-lasieve4I12e.exe
	ln -fs lasieve4/gnfs-lasieve4I13e.exe gnfs-lasieve4I13e.exe
	ln -fs lasieve4/gnfs-lasieve4I14e.exe gnfs-lasieve4I14e.exe
else
	ln -fs lasieve4/gnfs-lasieve4I12e gnfs-lasieve4I12e
	ln -fs lasieve4/gnfs-lasieve4I13e gnfs-lasieve4I13e
	ln -fs lasieve4/gnfs-lasieve4I14e gnfs-lasieve4I14e
endif

polsel : ;
	cd pol5; CFLAGS="$(OPT3) -I. $(LOCALINC)" LIBFLAGS="$(LIBFLAGS)" $(MAKE) intel
ifeq ($(OS),Windows_NT)
	ln -fs pol5/pol51m0b-intel.exe pol51m0b.exe
	ln -fs pol5/pol51m0n-intel.exe pol51m0n.exe
	ln -fs pol5/pol51opt-intel.exe pol51opt.exe
else
	ln -fs pol5/pol51m0b-intel pol51m0b
	ln -fs pol5/pol51m0n-intel pol51m0n
	ln -fs pol5/pol51opt-intel pol51opt
endif

strip : ;
ifeq ($(OS),Windows_NT)
	strip *.exe
else
	strip $(BINS) gnfs-lasieve4I1?e pol51m0? pol51opt
endif

clean : lasieve-clean polsel-clean ;
	rm -f *.o core $(BINS)
	rm -f gnfs-lasieve4I1?e
	rm -f *.exe

lasieve-clean: ;
	$(MAKE) -C lasieve4 clean

polsel-clean : ;
	$(MAKE) -C pol5 clean

squeaky : clean ;
	
